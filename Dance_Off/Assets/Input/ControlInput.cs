//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/ControlInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlInput"",
    ""maps"": [
        {
            ""name"": ""InputStreamActionMap"",
            ""id"": ""b3d5f2cb-217a-4643-b9ee-9b61269c5b23"",
            ""actions"": [
                {
                    ""name"": ""aKeyShortPress"",
                    ""type"": ""Button"",
                    ""id"": ""32d915c9-7b00-4587-a99f-464dd1e1d4d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""dKeyShortPress"",
                    ""type"": ""Button"",
                    ""id"": ""648499e5-2d51-44db-8763-cf106c99e84e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftArrowShortPress"",
                    ""type"": ""Button"",
                    ""id"": ""c1fc4f34-9877-4fbb-9335-4e33dfafa28a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightArrowShortPress"",
                    ""type"": ""Button"",
                    ""id"": ""a82774a4-4f08-436c-ba01-f555ce3a2802"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""aKeyLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""69146433-f1a9-4e25-8a71-03121b70ac6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""dKeyLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""1b6d6260-f56c-41e7-b483-f41fc5946f51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftArrowLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""a7d9f7d4-c665-44bc-a889-976d031c7899"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightArrowLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""657e7bd3-e872-426f-83db-61d334323e6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cecb1955-35d9-44ce-a145-95c6d4c477ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aKeyShortPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caf7b791-5a2b-488a-a839-2e99139c75e7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aKeyLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4a5b211-3258-4d12-89d5-85aa026d9ca4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftArrowShortPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4cc514e0-2c8d-455d-9f5d-2a1832d32b1d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Tap(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightArrowShortPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3898d0da-a866-4d49-8841-4c51bcc9d4e6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftArrowLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""964adb72-40b3-4a66-ad19-8354813e2d72"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightArrowLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe77b24e-2fb7-437d-98ce-c758720e0740"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Tap(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dKeyShortPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87196a97-d0b2-453d-9d02-9c4364c75ff9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dKeyLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputStreamActionMap
        m_InputStreamActionMap = asset.FindActionMap("InputStreamActionMap", throwIfNotFound: true);
        m_InputStreamActionMap_aKeyShortPress = m_InputStreamActionMap.FindAction("aKeyShortPress", throwIfNotFound: true);
        m_InputStreamActionMap_dKeyShortPress = m_InputStreamActionMap.FindAction("dKeyShortPress", throwIfNotFound: true);
        m_InputStreamActionMap_leftArrowShortPress = m_InputStreamActionMap.FindAction("leftArrowShortPress", throwIfNotFound: true);
        m_InputStreamActionMap_rightArrowShortPress = m_InputStreamActionMap.FindAction("rightArrowShortPress", throwIfNotFound: true);
        m_InputStreamActionMap_aKeyLongPress = m_InputStreamActionMap.FindAction("aKeyLongPress", throwIfNotFound: true);
        m_InputStreamActionMap_dKeyLongPress = m_InputStreamActionMap.FindAction("dKeyLongPress", throwIfNotFound: true);
        m_InputStreamActionMap_leftArrowLongPress = m_InputStreamActionMap.FindAction("leftArrowLongPress", throwIfNotFound: true);
        m_InputStreamActionMap_rightArrowLongPress = m_InputStreamActionMap.FindAction("rightArrowLongPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputStreamActionMap
    private readonly InputActionMap m_InputStreamActionMap;
    private IInputStreamActionMapActions m_InputStreamActionMapActionsCallbackInterface;
    private readonly InputAction m_InputStreamActionMap_aKeyShortPress;
    private readonly InputAction m_InputStreamActionMap_dKeyShortPress;
    private readonly InputAction m_InputStreamActionMap_leftArrowShortPress;
    private readonly InputAction m_InputStreamActionMap_rightArrowShortPress;
    private readonly InputAction m_InputStreamActionMap_aKeyLongPress;
    private readonly InputAction m_InputStreamActionMap_dKeyLongPress;
    private readonly InputAction m_InputStreamActionMap_leftArrowLongPress;
    private readonly InputAction m_InputStreamActionMap_rightArrowLongPress;
    public struct InputStreamActionMapActions
    {
        private @ControlInput m_Wrapper;
        public InputStreamActionMapActions(@ControlInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @aKeyShortPress => m_Wrapper.m_InputStreamActionMap_aKeyShortPress;
        public InputAction @dKeyShortPress => m_Wrapper.m_InputStreamActionMap_dKeyShortPress;
        public InputAction @leftArrowShortPress => m_Wrapper.m_InputStreamActionMap_leftArrowShortPress;
        public InputAction @rightArrowShortPress => m_Wrapper.m_InputStreamActionMap_rightArrowShortPress;
        public InputAction @aKeyLongPress => m_Wrapper.m_InputStreamActionMap_aKeyLongPress;
        public InputAction @dKeyLongPress => m_Wrapper.m_InputStreamActionMap_dKeyLongPress;
        public InputAction @leftArrowLongPress => m_Wrapper.m_InputStreamActionMap_leftArrowLongPress;
        public InputAction @rightArrowLongPress => m_Wrapper.m_InputStreamActionMap_rightArrowLongPress;
        public InputActionMap Get() { return m_Wrapper.m_InputStreamActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputStreamActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IInputStreamActionMapActions instance)
        {
            if (m_Wrapper.m_InputStreamActionMapActionsCallbackInterface != null)
            {
                @aKeyShortPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnAKeyShortPress;
                @aKeyShortPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnAKeyShortPress;
                @aKeyShortPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnAKeyShortPress;
                @dKeyShortPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnDKeyShortPress;
                @dKeyShortPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnDKeyShortPress;
                @dKeyShortPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnDKeyShortPress;
                @leftArrowShortPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnLeftArrowShortPress;
                @leftArrowShortPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnLeftArrowShortPress;
                @leftArrowShortPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnLeftArrowShortPress;
                @rightArrowShortPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnRightArrowShortPress;
                @rightArrowShortPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnRightArrowShortPress;
                @rightArrowShortPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnRightArrowShortPress;
                @aKeyLongPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnAKeyLongPress;
                @aKeyLongPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnAKeyLongPress;
                @aKeyLongPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnAKeyLongPress;
                @dKeyLongPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnDKeyLongPress;
                @dKeyLongPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnDKeyLongPress;
                @dKeyLongPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnDKeyLongPress;
                @leftArrowLongPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnLeftArrowLongPress;
                @leftArrowLongPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnLeftArrowLongPress;
                @leftArrowLongPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnLeftArrowLongPress;
                @rightArrowLongPress.started -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnRightArrowLongPress;
                @rightArrowLongPress.performed -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnRightArrowLongPress;
                @rightArrowLongPress.canceled -= m_Wrapper.m_InputStreamActionMapActionsCallbackInterface.OnRightArrowLongPress;
            }
            m_Wrapper.m_InputStreamActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @aKeyShortPress.started += instance.OnAKeyShortPress;
                @aKeyShortPress.performed += instance.OnAKeyShortPress;
                @aKeyShortPress.canceled += instance.OnAKeyShortPress;
                @dKeyShortPress.started += instance.OnDKeyShortPress;
                @dKeyShortPress.performed += instance.OnDKeyShortPress;
                @dKeyShortPress.canceled += instance.OnDKeyShortPress;
                @leftArrowShortPress.started += instance.OnLeftArrowShortPress;
                @leftArrowShortPress.performed += instance.OnLeftArrowShortPress;
                @leftArrowShortPress.canceled += instance.OnLeftArrowShortPress;
                @rightArrowShortPress.started += instance.OnRightArrowShortPress;
                @rightArrowShortPress.performed += instance.OnRightArrowShortPress;
                @rightArrowShortPress.canceled += instance.OnRightArrowShortPress;
                @aKeyLongPress.started += instance.OnAKeyLongPress;
                @aKeyLongPress.performed += instance.OnAKeyLongPress;
                @aKeyLongPress.canceled += instance.OnAKeyLongPress;
                @dKeyLongPress.started += instance.OnDKeyLongPress;
                @dKeyLongPress.performed += instance.OnDKeyLongPress;
                @dKeyLongPress.canceled += instance.OnDKeyLongPress;
                @leftArrowLongPress.started += instance.OnLeftArrowLongPress;
                @leftArrowLongPress.performed += instance.OnLeftArrowLongPress;
                @leftArrowLongPress.canceled += instance.OnLeftArrowLongPress;
                @rightArrowLongPress.started += instance.OnRightArrowLongPress;
                @rightArrowLongPress.performed += instance.OnRightArrowLongPress;
                @rightArrowLongPress.canceled += instance.OnRightArrowLongPress;
            }
        }
    }
    public InputStreamActionMapActions @InputStreamActionMap => new InputStreamActionMapActions(this);
    public interface IInputStreamActionMapActions
    {
        void OnAKeyShortPress(InputAction.CallbackContext context);
        void OnDKeyShortPress(InputAction.CallbackContext context);
        void OnLeftArrowShortPress(InputAction.CallbackContext context);
        void OnRightArrowShortPress(InputAction.CallbackContext context);
        void OnAKeyLongPress(InputAction.CallbackContext context);
        void OnDKeyLongPress(InputAction.CallbackContext context);
        void OnLeftArrowLongPress(InputAction.CallbackContext context);
        void OnRightArrowLongPress(InputAction.CallbackContext context);
    }
}
